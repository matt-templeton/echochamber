// Mocks generated by Mockito 5.4.5 from annotations
// in echochamber/test/services/video_feed_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:echochamber/models/video_model.dart' as _i3;
import 'package:echochamber/repositories/video_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuerySnapshot_0<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWatchSession_1 extends _i1.SmartFake implements _i3.WatchSession {
  _FakeWatchSession_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_2 extends _i1.SmartFake
    implements _i2.SnapshotMetadata {
  _FakeSnapshotMetadata_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentReference_3<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentReference<T> {
  _FakeDocumentReference_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [VideoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoRepository extends _i1.Mock implements _i4.VideoRepository {
  MockVideoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> createVideo(_i3.Video? video) =>
      (super.noSuchMethod(
            Invocation.method(#createVideo, [video]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.Video?> getVideoById(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#getVideoById, [videoId]),
            returnValue: _i5.Future<_i3.Video?>.value(),
          )
          as _i5.Future<_i3.Video?>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getUserVideos(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserVideos, [userId]),
            returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getVideosByGenre(String? genre) =>
      (super.noSuchMethod(
            Invocation.method(#getVideosByGenre, [genre]),
            returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getVideosByTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#getVideosByTag, [tag]),
            returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Future<void> updateVideo(String? videoId, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#updateVideo, [videoId, data]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteVideo(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteVideo, [videoId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> incrementViewCount(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementViewCount, [videoId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> likeVideo(String? videoId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#likeVideo, [videoId, userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> unlikeVideo(String? videoId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#unlikeVideo, [videoId, userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> hasUserLikedVideo(String? videoId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#hasUserLikedVideo, [videoId, userId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getTrendingVideos({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getTrendingVideos, [], {#limit: limit}),
            returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getFeedVideos({
    int? limit = 10,
    _i2.DocumentSnapshot<Object?>? startAfter,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFeedVideos, [], {
              #limit: limit,
              #startAfter: startAfter,
            }),
            returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Future<_i2.QuerySnapshot<Object?>> getNextFeedVideo({
    _i2.DocumentSnapshot<Object?>? startAfter,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getNextFeedVideo, [], {#startAfter: startAfter}),
            returnValue: _i5.Future<_i2.QuerySnapshot<Object?>>.value(
              _FakeQuerySnapshot_0<Object?>(
                this,
                Invocation.method(#getNextFeedVideo, [], {
                  #startAfter: startAfter,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getUserLikedVideos(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserLikedVideos, [userId]),
            returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Future<void> addComment(
    String? videoId,
    String? userId,
    String? comment,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addComment, [videoId, userId, comment]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getVideoComments(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#getVideoComments, [videoId]),
            returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Future<List<_i3.VideoQualityVariant>?> getVideoVariants(
    String? videoId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getVideoVariants, [videoId]),
            returnValue: _i5.Future<List<_i3.VideoQualityVariant>?>.value(),
          )
          as _i5.Future<List<_i3.VideoQualityVariant>?>);

  @override
  _i5.Future<String?> getVideoUrlForQuality(String? videoId, String? quality) =>
      (super.noSuchMethod(
            Invocation.method(#getVideoUrlForQuality, [videoId, quality]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String?> getAdaptiveVideoUrl(String? videoId, int? bandwidthBps) =>
      (super.noSuchMethod(
            Invocation.method(#getAdaptiveVideoUrl, [videoId, bandwidthBps]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<_i3.WatchSession> startWatchSession(
    String? videoId,
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startWatchSession, [videoId, userId]),
            returnValue: _i5.Future<_i3.WatchSession>.value(
              _FakeWatchSession_1(
                this,
                Invocation.method(#startWatchSession, [videoId, userId]),
              ),
            ),
          )
          as _i5.Future<_i3.WatchSession>);

  @override
  _i5.Future<void> updateWatchSession(
    String? sessionId, {
    int? position,
    int? duration,
    bool? completed,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateWatchSession,
              [sessionId],
              {#position: position, #duration: duration, #completed: completed},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> endWatchSession(String? sessionId, String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#endWatchSession, [sessionId, videoId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.WatchSession?> getLastWatchSession(
    String? videoId,
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getLastWatchSession, [videoId, userId]),
            returnValue: _i5.Future<_i3.WatchSession?>.value(),
          )
          as _i5.Future<_i3.WatchSession?>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getWatchHistory(
    String? userId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getWatchHistory, [userId], {#limit: limit}),
            returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
          )
          as _i5.Stream<_i2.QuerySnapshot<Object?>>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreQuerySnapshot extends _i1.Mock
    implements _i2.QuerySnapshot<Map<String, dynamic>> {
  MockFirestoreQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.QueryDocumentSnapshot<Map<String, dynamic>>> get docs =>
      (super.noSuchMethod(
            Invocation.getter(#docs),
            returnValue: <_i2.QueryDocumentSnapshot<Map<String, dynamic>>>[],
          )
          as List<_i2.QueryDocumentSnapshot<Map<String, dynamic>>>);

  @override
  List<_i2.DocumentChange<Map<String, dynamic>>> get docChanges =>
      (super.noSuchMethod(
            Invocation.getter(#docChanges),
            returnValue: <_i2.DocumentChange<Map<String, dynamic>>>[],
          )
          as List<_i2.DocumentChange<Map<String, dynamic>>>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_2(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreDocumentSnapshot extends _i1.Mock
    implements _i2.QueryDocumentSnapshot<Map<String, dynamic>> {
  MockFirestoreDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i2.DocumentReference<Map<String, dynamic>> get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _FakeDocumentReference_3<Map<String, dynamic>>(
              this,
              Invocation.getter(#reference),
            ),
          )
          as _i2.DocumentReference<Map<String, dynamic>>);

  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_2(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i2.SnapshotMetadata);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  Map<String, dynamic> data() =>
      (super.noSuchMethod(
            Invocation.method(#data, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));

  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}
